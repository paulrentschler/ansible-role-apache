#
# {{ ansible_managed }}
#

<VirtualHost {{ item.ip_address|default('*') }}:{% if item.use_ssl|default('no')|bool %}443{% else %}80{% endif %}>

{% if item.hostname == "www" %}
    ServerName {{ item.domain }}
    ServerAlias {{ item.hostname }}.{{ item.domain }}
{% else %}
    ServerName {{ item.hostname }}.{{ item.domain }}
{% endif %}
    UseCanonicalName   On

{% if item.docroot|default('yes')|bool %}
    DocumentRoot "/home/httpd/{{ item.domain }}/{{ item.hostname }}/html"

    <IfModule mod_php.c>
        <IfModule mod_dir.c>
            DirectoryIndex index.php index.html index.html.var
        </IfModule>
    </IfModule>
{% endif %}


    ###
    # Prevent the HTTP_PROXY vulnerability (http://httpoxy.com)
    ###
    <IfModule mod_headers.c>
        RequestHeader unset Proxy
    </IfModule>


{% if item.error_docs|default({}) %}
    ###
    # Custom error documents
    ###

{% for code in item.error_docs %}
        ErrorDocument {{ code }} {{ item.error_docs[code] }}
{% endfor %}

{% if item.docroot|default('yes')|bool %}
        # prevent direct access to the custom error pages
{% for code in item.error_docs %}
        <Files "{{ item.error_docs[code] }}">
            <If "-z %{ENV:REDIRECT_STATUS}">
                RedirectMatch 404 ^{{ item.error_docs[code] }}$
            </If>
        </Files>
{% endfor %}
{% endif %}
{% endif %}

{% if item.use_ssl|default('no')|bool and item.use_azuresso|default('no')|bool %}
    ###
    # Configure AzureSSO
    ###
        # For debugging/seeing session info. Can be removed for production:
        #OIDCInfoHook iat access_token access_token_expires id_token userinfo refresh_token session

{% if item.hostname == "www" and not item.use_www|default('no')|bool %}
        OIDCRedirectURI https://{{ item.domain }}/valid/redirect_uri
{% else %}
        OIDCRedirectURI https://{{ item.hostname }}.{{ item.domain }}/valid/redirect_uri
{% endif %}
{% endif %}



{% if item.use_ssl|default('no')|bool and item.use_cosign|default('no')|bool %}
    ###
    # Configure CoSign
    ###
        CosignProtected                 On
        CosignHostname                  connect.webaccess.psu.edu
        CosignPort                      6664
        CosignValidReference            ^https?:\/\/.*\.psu\.edu(\/.*)?
        CosignValidationErrorRedirect   https://webaccess.psu.edu/validation_error.html
        CosignRedirect                  https://webaccess.psu.edu/
        CosignPostErrorRedirect         https://webaccess.psu.edu/post_error.html
{% if item.hostname == "www" and not item.use_www|default('no')|bool %}
        CosignService                   {{ item.domain }}
{% else %}
        CosignService                   {{ item.hostname }}.{{ item.domain }}
{% endif %}
        CosignCrypto                    {{ apache_ssl_privatekeys }}/{{ item.hostname }}.{{ item.domain }}.key {{ apache_ssl_path }}/{{ item.hostname }}.{{ item.domain }}.crt {{ apache_ssl_path }}/addtrust-usertrust.pem
        CosignAllowPublicAccess         Off
{% endif %}



    ###
    # Define the site rewrite rules
    ###
        RewriteEngine On

{% if not item.use_ssl|default('no')|bool and item.redirect2ssl|default('no')|bool %}
        # redirect all traffic to the SSL'ed site
{% if item.hostname == "www" and not item.use_www|default('no')|bool %}
        RewriteCond %{HTTP_HOST} {{ item.domain }}    [OR]
{% endif %}
        RewriteCond %{HTTP_HOST} {{ item.hostname }}.{{ item.domain }}
        IncludeOptional rewrites/{{ item.hostname }}.{{ item.domain }}/exclusions/rewrite2ssl-exclude_*.conf
        RewriteRule ^(.*) https://{{ item.hostname }}.{{ item.domain }}$1     [R=permanent,NC,L]

{% elif item.redirect2site|default('') %}
        # redirect all traffic to another site
{% if item.hostname == "www" and not item.use_www|default('no')|bool %}
        RewriteCond %{HTTP_HOST} {{ item.domain }}    [OR]
{% endif %}
        RewriteCond %{HTTP_HOST} {{ item.hostname }}.{{ item.domain }}
        IncludeOptional rewrites/{{ item.hostname }}.{{ item.domain }}{% if item.use_ssl|default('no')|bool %}-ssl{% endif %}/exclusions/redirect2other-exclude_*.conf
        RewriteRule ^(.*)   {{ item.redirect2site }}$1       [R=permanent,NC,L]

{% else %}
{% if item.hostname == "www" and not item.use_www|default('no')|bool %}
        # ensure www. is NOT used
        RewriteCond %{HTTP_HOST}    ^www.{{ item.domain }}$
        RewriteRule ^(.*)$          http{% if item.use_ssl|default('no')|bool %}s{% endif %}://{{ item.domain }}$1      [R=permanent,NC,L]
{% elif item.hostname == "www" and item.use_www|default('no')|bool %}
        # ensure www. IS used
        RewriteCond %{HTTP_HOST}    ^{{ item.domain }}$
        RewriteRule ^(.*)$          http{% if item.use_ssl|default('no')|bool %}s{% endif %}://www.{{ item.domain }}$1      [R=permanent,NC,L]
{% endif %}


        # load additional rewrite rules
        IncludeOptional rewrites/{{ item.hostname }}.{{ item.domain }}{% if item.use_ssl|default('no')|bool %}-ssl{% endif %}/*.conf


{% if item.plone_site|default('') %}
{% if item.plone_fsd_path|default('') %}
        # redirect the author pages and the join form to FSD
        RewriteRule ^/author/(.*)$              /{{ item.plone_fsd_path }}/$1      [R=permanent,NC,L]
        RewriteRule ^/join_form(.*)$            /{{ item.plone_fsd_path }}         [R=permanent,NC,L]
{% else %}
{% if item.plone_block_authors|default('yes')|bool %}
        # block access to the author pages
        RedirectMatch 403 ^/author/(.*)$
{% endif %}
{% if item.plone_block_joinform|default('yes')|bool %}
        # block access to the join form
        RedirectMatch 403 ^/join_form(.*)$
{% endif %}
{% endif %}

        # block access the sendto_form action
        RedirectMatch 403 ^/(.*)/sendto_form(.*)$

{% if item.use_ssl|default('no')|bool %}
        # deny access to the ZMI
        RewriteRule ^/(manage|manage_(.*)|(.*)/manage|(.*)/manage_(.*))      -                           [L,NC]
        <LocationMatch "^/(manage|manage_(.*)|(.*)/manage|(.*)/manage_(.*))">
            Deny from all
        </LocationMatch>
{% else %}
        # redirect ZMI access to use SSL
        RewriteRule ^/(manage|manage_(.*)|(.*)/manage|(.*)/manage_(.*))      https://%{HTTP_HOST}/$1     [R=permanent,L,NC]
{% endif %}

        # prevent access to the Zope root page
        RewriteRule ^/aq_(.*)                                                /                           [R=permanent,L]


        ###
        # Rewrite rules that exclude certain non-plone sites and then direct
        # everything else to plone. The two rule groups combined normalize
        # requests to avoid caching /page and /page/ separately.
        #
{% if item.plone_varnish_port|default('') %}
        # This configuration forwards all requests directly to the
        # Varnish Caching server running on port 6081.
{% else %}
        # This configuration forwards all requests directly to the
        # Zope client running on port {{ item.plone_zope_port }}.
{% endif %}
        #
        # The RewriteCond provides an example of how to exclude redirecting
        # a URL to Plone
        ###
{% if item.use_azuresso|default('no')|bool %}
            RewriteCond %{REQUEST_URI}  !^/valid/redirect_uri(.*)$
{% endif %}
{% if item.use_cosign|default('no')|bool %}
            RewriteCond %{REQUEST_URI}  !^/cosign/valid(.*)$
{% endif %}
{% if item.plone_exclude_robotstxt|default('no')|bool %}
            RewriteCond %{REQUEST_URI}  !^robots.txt$
{% endif %}
            IncludeOptional rewrites/{{ item.hostname }}.{{ item.domain }}{% if item.use_ssl|default('no')|bool %}-ssl{% endif %}/exclusions/plone-exclude_*.conf
{% if item.plone_varnish_port|default('') %}
            RewriteRule ^/(.*)/$ http://127.0.0.1:{{ item.plone_varnish_port }}/VirtualHostBase/http/%{SERVER_NAME}:80/{{ item.plone_site }}/VirtualHostRoot/$1 [L,P{% if item.use_ssl|default('no')|bool %},E=remoteUser:%{LA-U:REMOTE_USER}{% endif %}]
{% else %}
            RewriteRule ^/(.*)/$ http://127.0.0.1:{{ item.plone_zope_port|default('8080') }}/VirtualHostBase/http{% if item.use_ssl|default('no')|bool %}s{% endif %}/%{SERVER_NAME}:{% if item.use_ssl|default('no')|bool %}443{% else %}80{% endif %}/{{ item.plone_site }}/VirtualHostRoot/$1 [L,P{% if item.use_ssl|default('no')|bool %},E=remoteUser:%{LA-U:REMOTE_USER}{% endif %}]
{% endif %}

{% if item.use_azuresso|default('no')|bool %}
            RewriteCond %{REQUEST_URI}  !^/valid/redirect_uri(.*)$
{% endif %}
{% if item.use_cosign|default('no')|bool %}
            RewriteCond %{REQUEST_URI}  !^/cosign/valid(.*)$
{% endif %}
{% if item.plone_exclude_robotstxt|default('no')|bool %}
            RewriteCond %{REQUEST_URI}  !^robots.txt$
{% endif %}
            IncludeOptional rewrites/{{ item.hostname }}.{{ item.domain }}{% if item.use_ssl|default('no')|bool %}-ssl{% endif %}/exclusions/plone-exclude_*.conf
{% if item.plone_varnish_port|default('') %}
            RewriteRule ^/(.*)$ http://127.0.0.1:{{ item.plone_varnish_port }}/VirtualHostBase/http/%{SERVER_NAME}:80/{{ item.plone_site }}/VirtualHostRoot/$1 [L,P{% if item.use_ssl|default('no')|bool %},E=remoteUser:%{LA-U:REMOTE_USER}{% endif %}]
{% else %}
            RewriteRule ^/(.*)$ http://127.0.0.1:{{ item.plone_zope_port|default('8080') }}/VirtualHostBase/http{% if item.use_ssl|default('no')|bool %}s{% endif %}/%{SERVER_NAME}:{% if item.use_ssl|default('no')|bool %}443{% else %}80{% endif %}/{{ item.plone_site }}/VirtualHostRoot/$1 [L,P{% if item.use_ssl|default('no')|bool %},E=remoteUser:%{LA-U:REMOTE_USER}{% endif %}]
{% endif %}
{% endif %}
{% endif %}



{% if not item.redirect2site|default('') %}
    ###
    # Directory access and configuration
    #
    # Enable: symbolic links to be followed
    # Disable: directory listings, Server Side Includes (SSI) and CGI file executions
    ###
{% if item.docroot|default('yes')|bool %}
        <Directory /home/httpd/{{ item.domain }}/{{ item.hostname }}/html>
            Options -Indexes +FollowSymLinks -Includes -ExecCGI
            AllowOverride None
            Require all granted
        </Directory>
{% endif %}
{% endif %}

{% if item.use_ssl|default('no')|bool and item.use_azuresso|default('no')|bool %}
        ###
        # Directory access and configuration for AzureSSO
        ###
            <Directory />
                Options -Indexes +FollowSymLinks -Includes -ExecCGI
                AllowOverride None
            </Directory>
            <Location />
                # Configure access restrictions
                AuthType openid-connect
                <RequireAll>
{% if item.hostname == "www" and not item.use_www|default('no')|bool %}
                    <RequireAny>
                        Require expr %{HTTP_HOST} == "{{ item.hostname }}.{{ item.domain }}"
                        Require expr %{HTTP_HOST} == "{{ item.domain }}"
                    </RequireAny>
{% else %}
                    Require expr %{HTTP_HOST} == "{{ item.hostname }}.{{ item.domain }}"
{% endif %}
{% if item.ips_allowed|default([]) %}
                    <RequireAny>
{% for ip in item.ips_allowed|flatten %}
                        Require ip {{ ip }}
{% endfor %}
                    </RequireAny>
{% endif %}
                    Require valid-user
                </RequireAll>
            </Location>

            <Location /valid>
                AuthType openid-connect
                Require valid-user
            </Location>

            <Location /favicon.ico>
                AuthType none
                Require all granted
            </Location>

{% if item.use_robotstxt|default('no')|bool %}
            <Location /robots.txt>
                AuthType none
                Require all granted
            </Location>
{% endif %}
{% endif %}

{% if item.use_ssl|default('no')|bool and item.use_cosign|default('no')|bool %}
        ###
        # Directory access and configuration for CoSign
        ###
            <Directory />
                Options -Indexes +FollowSymLinks -Includes -ExecCGI
                AllowOverride None
            </Directory>
            <Location />
                # Configure access restrictions
                AuthType Cosign
                <RequireAll>
{% if item.hostname == "www" and not item.use_www|default('no')|bool %}
                    <RequireAny>
                        Require expr %{HTTP_HOST} == "{{ item.hostname }}.{{ item.domain }}"
                        Require expr %{HTTP_HOST} == "{{ item.domain }}"
                    </RequireAny>
{% else %}
                    Require expr %{HTTP_HOST} == "{{ item.hostname }}.{{ item.domain }}"
{% endif %}
{% if item.ips_allowed|default([]) %}
                    <RequireAny>
{% for ip in item.ips_allowed|flatten %}
                        Require ip {{ ip }}
{% endfor %}
                    </RequireAny>
{% endif %}
                    Require valid-user
                </RequireAll>
            </Location>

            <Location /cosign/valid>
                SetHandler          cosign
                CosignProtected     Off
                Require all granted
            </Location>

            <Location /favicon.ico>
                AuthType none
                Require all granted
            </Location>

{% if item.use_robotstxt|default('no')|bool %}
            <Location /robots.txt>
                AuthType none
                Require all granted
            </Location>
{% endif %}
{% endif %}

{% if not item.use_azuresso|default('no')|bool and not item.use_cosign|default('no')|bool%}
        ###
        # Restrict access to only this host name
        ###
        <Location />
            <RequireAll>
{% if item.hostname == "www" and not item.use_www|default('no')|bool %}
                <RequireAny>
                    Require expr %{HTTP_HOST} == "{{ item.hostname }}.{{ item.domain }}"
                    Require expr %{HTTP_HOST} == "{{ item.domain }}"
                </RequireAny>
{% else %}
                Require expr %{HTTP_HOST} == "{{ item.hostname }}.{{ item.domain }}"
{% endif %}
{% if item.ips_allowed|default([]) %}
                <RequireAny>
{% for ip in item.ips_allowed|flatten %}
                    Require ip {{ ip }}
{% endfor %}
                </RequireAny>
{% endif %}
            </RequireAll>
        </Location>
{% endif %}



    ###
    # Log configuration
    # Possible values include: debug, info, notice, warn, error, crit, alert, emerg
    #
{% if item.use_ssl|default('no')|bool and item.use_azuresso|default('no')|bool %}
    # View AzureSSO log statements with:
    #     tail -f {% if item.use_ssl|default('no')|bool %}ssl-{% endif %}error.log | fgrep 'openidc:'
    #
{% endif %}
    # View redirect log statements with:
    #     tail -f {% if item.use_ssl|default('no')|bool %}ssl-{% endif %}error.log | fgrep '[rewrite:'
    ###

        # Normal logging
        LogLevel {{ item.loglevel|default(apache_loglevel)|default('warn') }}

{% if item.use_ssl|default('no')|bool and item.use_azuresso|default('no')|bool %}
        # Logging with AzureSSO
        #LogLevel debug auth_openidc:debug

{% endif %}
        # Logging with rewrites (valid values: trace1 - trace8)
        #LogLevel info rewrite:trace5

{% if item.use_ssl|default('no')|bool %}
        CustomLog {{ apache_log_path }}/{{ item.domain }}/{{ item.hostname }}/ssl-access.log combined
        ErrorLog  {{ apache_log_path }}/{{ item.domain }}/{{ item.hostname }}/ssl-error.log
        CustomLog {{ apache_log_path }}/{{ item.domain }}/{{ item.hostname }}/ssl.log \
            "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
{% else %}
        CustomLog {{ apache_log_path }}/{{ item.domain }}/{{ item.hostname }}/access.log combined
        ErrorLog  {{ apache_log_path }}/{{ item.domain }}/{{ item.hostname }}/error.log
{% endif %}



{% if item.use_ssl|default('no')|bool %}
{% set _comment = not item.ssl_install_cert|default('yes')|bool %}
    ###
    # Configure SSL
    ###
        {% if _comment %}#{% endif %}SSLEngine On
{% if item.ssl_certbot|default('no')|bool %}
        SSLCertificateFile /etc/letsencrypt/live/{{ item.hostname }}.{{ item.domain }}/fullchain.pem
        SSLCertificateKeyFile /etc/letsencrypt/live/{{ item.hostname }}.{{ item.domain }}/privkey.pem
{% else %}
        {% if _comment %}#{% endif %}SSLCertificateFile {{ apache_ssl_path }}/{{ item.hostname }}.{{ item.domain }}.crt
        {% if _comment %}#{% endif %}SSLCertificateKeyFile {{ apache_ssl_privatekeys }}/{{ item.hostname }}.{{ item.domain }}.key
{% if item.ssl_chain_cert|default('') %}
        SSLCertificateChainFile {{ apache_ssl_path }}/{{ item.ssl_chain_cert }}
{% endif %}
{% endif %}
{% endif %}



{% if item.use_ssl|default('no')|bool and item.use_azuresso|default('no')|bool %}
    ###
    # Put AzureSSO-specified username in headers
    ###
        <IfModule mod_auth_openidc.c>
            RequestHeader set X_REMOTE_USER %{remoteUser}e
        </IfModule>
{% endif %}
{% if item.use_ssl|default('no')|bool and item.use_cosign|default('no')|bool %}
    ###
    # Put CoSign-specified username and realm in headers
    ###
        <IfModule mod_cosign.c>
            RequestHeader set X_REMOTE_USER %{remoteUser}e
            RequestHeader set X_REMOTE_REALM %{REMOTE_REALM}e
        </IfModule>
{% endif %}


{% if item.proxy_origins|default([])|length > 0 %}
    ###
    # Turn on proxying for sending requests to the origin server(s)
    #
    # We are using Apache as a reverse proxy/gateway in front of the
    # origin servers for security and don't need ProxyRequests turned
    # on but we do need the <Proxy> block and related statements.
    #
    # See: /etc/apache2/mods-enabled/proxy.conf for full details
    ###
        <IfModule mod_proxy.c>
            ProxyRequests Off

{% if item.proxy_origins|length == 1 %}
            <Proxy *>
                AddDefaultCharset off
                Require all granted
            </Proxy>

{% if item.use_azuresso|default('no')|bool %}
            ProxyPass /valid/redirect_uri !
{% endif %}
{% if item.use_cosign|default('no')|bool %}
            ProxyPass /cosign/valid !
{% endif %}
{% for url in item.proxy_exclude_urls|default([]) %}
            ProxyPass {{ url }} !
{% endfor %}
            ProxyPass "{{ item.proxy_url }}" "{{ item.proxy_origins[0] }}"
            ProxyPassReverse "{{ item.proxy_url }}" "{{ item.proxy_origins[0] }}"
{% endif %}

{% if item.proxy_origins|length > 1 %}
            <Proxy "balancer://proxyfarm">
{% for server in item.proxy_origins %}
                BalancerMember "{{ server }}"
{% endfor %}
                AddDefaultCharset off
                Require all granted
            </Proxy>

{% if item.use_azuresso|default('no')|bool %}
            ProxyPass /valid/redirect_uri !
{% endif %}
{% if item.use_cosign|default('no')|bool %}
            ProxyPass /cosign/valid !
{% endif %}
{% for url in item.proxy_exclude_urls|default([]) %}
            ProxyPass {{ url }} !
{% endfor %}
            ProxyPass "{{ item.proxy_url }}" "balancer://proxyfarm" lbmethod=byrequests maxattempts={{ item.proxy_origins|length - 1 }}
            ProxyPassReverse "{{ item.proxy_url }}" "balancer://proxyfarm"
{% endif %}
        </IfModule>
{% endif %}



{% if item.plone_site|default('') %}
    ###
    # Turn on proxying for sending requests to Plone
    #
    # We are using apache as a reverse proxy/gateway in front of Plone
    # and don't need ProxyRequests turned on but we do need the
    # <Proxy *> block and related statements.
    #
    # See: /etc/apache2/mods-enabled/proxy.conf for full details
    ###
        <IfModule mod_proxy.c>
            ProxyRequests Off
            <Proxy *>
                AddDefaultCharset off
                Require all granted
            </Proxy>
            ProxyVia On
        </IfModule>
{% endif %}



{% if not item.redirect2site|default('') %}
    ###
    # Application configurations
    #
    # This allows for configuration directives to be imported from the
    # `apps` directory which contain application-specific directives.
    #
    # Naming convention for the `apps` directory:
    #    host.domain.tld[-ssl]/###-app-name.conf
    ###
        IncludeOptional apps/{{ item.hostname }}.{{ item.domain }}{% if item.use_ssl|default('no')|bool %}-ssl{% endif %}/*.conf
{% endif %}
</VirtualHost>
